services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: procurement_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-procurement_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-procurement_pass}
      POSTGRES_DB: ${POSTGRES_DB:-procurement_scanner}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-procurement_user} -d ${POSTGRES_DB:-procurement_scanner}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Redis for caching and job queue
  redis:
    image: redis:7-alpine
    container_name: procurement_redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # Selenium Grid Hub
  selenium-hub:
    image: selenium/hub:4.15.0
    container_name: selenium_hub
    ports:
      - "4444:4444"
      - "4442:4442"
      - "4443:4443"
    environment:
      - SE_NODE_MAX_SESSIONS=5
      - SE_NODE_SESSION_TIMEOUT=86400
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4444/wd/hub/status"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Selenium Chrome Node
  selenium-chrome:
    image: selenium/node-chrome:4.15.0
    depends_on:
      selenium-hub:
        condition: service_healthy
    environment:
      - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
      - SE_NODE_MAX_SESSIONS=3
    volumes:
      - /dev/shm:/dev/shm
    deploy:
      replicas: 2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555/status"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: procurement_api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      selenium-hub:
        condition: service_healthy
    env_file: .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-procurement_user}:${POSTGRES_PASSWORD:-procurement_pass}@postgres:5432/${POSTGRES_DB:-procurement_scanner}
      - REDIS_URL=redis://redis:6379
      - SELENIUM_HUB_URL=http://selenium-hub:4444/wd/hub
      - MERX_USERNAME=${MERX_USERNAME:-}
      - MERX_PASSWORD=${MERX_PASSWORD:-}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./data:/app/data
      - ./logs:/app/logs
    command: python main.py
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Celery worker for background jobs
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: procurement_celery
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      selenium-hub:
        condition: service_healthy
    env_file: .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-procurement_user}:${POSTGRES_PASSWORD:-procurement_pass}@postgres:5432/${POSTGRES_DB:-procurement_scanner}
      - REDIS_URL=redis://redis:6379
      - SELENIUM_HUB_URL=http://selenium-hub:4444/wd/hub
      - MERX_USERNAME=${MERX_USERNAME:-}
      - MERX_PASSWORD=${MERX_PASSWORD:-}
    volumes:
      - ./backend:/app
      - ./data:/app/data
      - ./logs:/app/logs
    command: celery -A tasks worker --loglevel=info
    healthcheck:
      test: ["CMD", "celery", "-A", "tasks", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Celery beat for scheduled tasks
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: procurement_beat
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-procurement_user}:${POSTGRES_PASSWORD:-procurement_pass}@postgres:5432/${POSTGRES_DB:-procurement_scanner}
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    command: celery -A tasks beat --loglevel=info
    healthcheck:
      test: ["CMD", "ps", "aux", "|", "grep", "celery"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: procurement_frontend
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - REACT_APP_API_URL=/api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: procurement_network